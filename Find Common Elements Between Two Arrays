You are given two 0-indexed integer arrays nums1 and nums2 of sizes n and m, respectively.

The number of indices i such that 0 <= i < n and nums1[i] occurs at least once in nums2.
The number of indices i such that 0 <= i < m and nums2[i] occurs at least once in nums1.
Return an integer array answer of size 2 containing the two values in the above order.

 
Example 1:

Input: nums1 = [4,3,2,3,1], nums2 = [2,2,5,2,3,6]
Output: [3,4]
Explanation: We calculate the values as follows:
- The elements at indices 1, 2, and 3 in nums1 occur at least once in nums2. So the first value is 3.
- The elements at indices 0, 1, 3, and 4 in nums2 occur at least once in nums1. So the second value is 4.

SOLUTION:-
class Solution {
public:
    vector<int> findIntersectionValues(vector<int>& nums1, vector<int>& nums2) {
       
        unordered_map<int,int>mpp1;
        unordered_map<int,int>mpp2;

        int n1=nums1.size();
        int n2=nums2.size();

        for(int i=0;i<n1;i++){
            mpp1[nums1[i]]++;
        }
         for(int i=0;i<n2;i++){
            mpp2[nums2[i]]++;
        }

        int cnt1 = 0, cnt2 = 0;
        for (int i = 0; i < n1; i++) {
            if (mpp2.find(nums1[i]) != mpp2.end()) {
                cnt1++;
            }
        }
        for (int i = 0; i < n2; i++) {
            if (mpp1.find(nums2[i]) != mpp1.end()) {
                cnt2++;
            }
        }
          return {cnt1,cnt2};
    }
};
