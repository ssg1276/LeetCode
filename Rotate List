Given the head of a linked list, rotate the list to the right by k places.

Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]

SOLUTION:-
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(head==NULL || head->next==NULL){
            return head;
        }
        ListNode* tail=head;
        int len=1;
        while(tail->next!=NULL){
            len++;tail=tail->next;

        }
      
      tail->next=head;

        k = k % len;
        if (k == 0) {

            tail->next = NULL; 
            return head;
        }

      int rem=len-k;
      ListNode* temp=head;
      while(rem!=1){
        temp=temp->next;
        rem--;
      }

      head=temp->next;
      temp->next=NULL;
      return head;

    }
};
