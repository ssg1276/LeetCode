Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.
Return the minimized largest sum of the split.
A subarray is a contiguous part of the array.

Example 1:

Input: nums = [7,2,5,10,8], k = 2
Output: 18
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.

SOLUTION:-
class Solution {
public:

   int countPainters(vector<int>& nums, int k){
         int n = nums.size();   
         int partitions = 1;
         long long subarraySum = 0;
         for (int i = 0; i < n; i++) {
             if (subarraySum + nums[i] <= k) {
                 subarraySum += nums[i];
        }
        else {
            partitions++;
            subarraySum = nums[i];
        }
    }
    return partitions;
    
   }
    int splitArray(vector<int>& nums, int k) {
        int n=nums.size();
        if (k > n) return -1;

    int low = *max_element(nums.begin(), nums.end());
    int high = accumulate(nums.begin(), nums.end(), 0);
    while(low<=high){
        int mid=(low+high)/2;
        if(countPainters(nums,mid)>k){
            low=mid+1;
        }
        else{
            high=mid-1;
        }
    }
    return low;
    }
};
