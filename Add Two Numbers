You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example 1:

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

SOLUTION:-
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* dummy=new ListNode(-1);
        ListNode* curr=dummy;
        ListNode* l1=new ListNode(l1);
        ListNode* temp2=new ListNode(l2);
        int carry=0;
        while(l1!=NULL || temp2!=NULL){
            int sum=carry;
            if(l1) sum+=l1->data;
            if(temp2) sum+=temp2->data;
            ListNode* newNode=new ListNode(sum%10);
            carry=sum/10;

            curr->next=newNode;
            curr=curr->next;
            if(l1) l1=l1->next;
            if(temp2) temp2=temp2->next;
        }
        if(carry){
            ListNode* newNode=new ListNode(carry);
            curr->next=newNode;
        }
        return dummy->next;
    }
};
