You are given an integer array bloomDay, an integer m and an integer k.
You want to make m bouquets. To make a bouquet, you need to use k adjacent flowers from the garden.
The garden consists of n flowers, the ith flower will bloom in the bloomDay[i] and then can be used in exactly one bouquet.
Return the minimum number of days you need to wait to be able to make m bouquets from the garden. If it is impossible to make m bouquets return -1.

Example 1:

Input: bloomDay = [1,10,3,10,2], m = 3, k = 1
Output: 3
Explanation: Let us see what happened in the first three days. x means flower bloomed and _ means flower did not bloom in the garden.
We need 3 bouquets each should contain 1 flower.
After day 1: [x, _, _, _, _]   // we can only make one bouquet.
After day 2: [x, _, _, _, x]   // we can only make two bouquets.
After day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3.


SOLUTION:-
class Solution {
public:
    bool posible(vector<int> arr,int day, int m, int k){
        int cnt=0;
        int ans=0;
        for(int i=0;i<arr.size();i++){
            if(arr[i]<=day){
                cnt++;
            }
            else{
                ans+=(cnt/k);
                cnt=0;
        }
        }
        ans+=(cnt/k);
        if(ans >=m) return true;
        else return false;
    }

    int minDays(vector<int>& bloomDay, int m, int k) {
       int n=bloomDay.size();
       long long v= m*1LL *k*1LL;
       if(v>n) return -1;
        int mini=INT_MAX,maxi=INT_MIN;
        for(int i=0;i<n;i++){
            mini=min(mini,bloomDay[i]);
            maxi=max(maxi,bloomDay[i]);
        }
        int low=mini;
        int high=maxi;
        while(low<=high){
            int mid=(low+high)/2;
            if(posible(bloomDay,mid,m,k)){
               high=mid-1;
            }
            else{
                low=mid+1;
            }

        }
        return low;
    }
};
