You are given two strings s and t such that every character occurs at most once in s and t is a permutation of s.
The permutation difference between s and t is defined as the sum of the absolute difference between the index of the occurrence of each character in s and the index of the occurrence of the same character in t.
Return the permutation difference between s and t.

Example 1:
Input: s = "abc", t = "bac"
Output: 2


SOLUTION:-
class Solution {
public:
    int findPermutationDifference(string s, string t) {
        int sum=0;
        unordered_map<char,int> mpp;

        for(int i=0;i<t.length();i++){
            mpp[t[i]]=i;
        }
        for(int i=0;i<s.length();i++){
            if(mpp.find(s[i])!=mpp.end()){
                sum+=abs(i-mpp[s[i]]);
            }
        }
        return sum;
    }
};
