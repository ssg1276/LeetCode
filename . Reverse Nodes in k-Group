Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.
k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.
You may not alter the values in the list's nodes, only nodes themselves may be changed.

Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]

SOLUTION;-
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    
ListNode* findKthNode(ListNode* head , int k){
    ListNode* temp=head;
    while(temp!=NULL && k!=1){
        k--;
        temp=temp->next;
    }
    return temp;
}

ListNode* reverse(ListNode* head){
    ListNode* temp=head;
    ListNode* prevEl=NULL;
    while(temp!=NULL){
        ListNode* frontEl=temp->next;
        temp->next=prevEl;
        prevEl=temp;
        temp=frontEl;
    }
    return prevEl;
}
   
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* temp=head;
        ListNode* prevNode=NULL;
        while(temp!=NULL){
            ListNode* kthnode=findKthNode(temp,k);
            if(kthnode==NULL){
                if(prevNode){
                    prevNode->next=temp;
                }
                break;
            }
            ListNode* nextNode=kthnode->next;
            kthnode->next=NULL;
            reverse(temp);
            if(temp==head){
                head=kthnode;
            }
            else{
                prevNode->next=kthnode;
            }
            prevNode=temp;
            temp=nextNode;
        }
        return head;
    }
};
